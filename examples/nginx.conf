worker_processes 2;
pid /var/run/nginx.pid;

env APP_ENV;
env APP_CLUSTER;
env KUBERNETES_SERVICE_HOST;
env KUBERNETES_SERVICE_PORT;
env KUBERNETES_APISERVER_TOKEN;

events {
    worker_connections 1024;
}

http {

    lua_package_path '${prefix}/lua/lib/?.lua;;';
    lua_socket_log_errors off;

    lua_shared_dict lreu_upstream     2m;
    lua_shared_dict lreu_upstream_k8s 2m;

    lua_max_pending_timers 1024;
    lua_max_running_timers 1024;

    init_worker_by_lua_block {
        local env  = os.getenv("APP_ENV") or "default"
        local host = os.getenv("KUBERNETES_SERVICE_HOST")
        local port = os.getenv("KUBERNETES_SERVICE_PORT") or "6443"
        local auth = os.getenv("KUBERNETES_APISERVER_TOKEN")

        local syncer_k8s = require "lreu.syncer_k8s"
        syncer_k8s.init({
            apiserver_host = host,
            apiserver_port = port,
            namespace = env,
            token = auth,
            storage = ngx.shared.lreu_upstream_k8s
        })

        local syncer = require "lreu.syncer"
        syncer.init({
            etcd_host = etcd_host,
            etcd_port = etcd_port or 2379,
            etcd_path = "/v1/dev/services/",
            storage = ngx.shared.lreu_upstream
        })

        local picker = require "lreu.picker"
        picker.init(ngx.shared.lreu_upstream, ngx.shared.lreu_upstream_k8s, true)
    };

	upstream dynamic-upstream {
	    server 127.0.0.1:2222;
	    balancer_by_lua_block {
			local balancer = require "ngx.balancer"
			local picker = require "lreu.picker"
			local name = ngx.var.service_name
			if not name then
			    assert(balancer.set_current_peer("127.0.0.1", 2222))
			    return
			end

			local s, err = picker.rr(name)
			if not s then
			    ngx.log(ngx.ERR, err)
			    assert(balancer.set_current_peer("127.0.0.1", 2222))
			    return
			end
		};

	    keepalive 30;
	}

	server {
		listen 80 default_server;
		server_name _;

		location / {
			set $service_name "my_service";

			proxy_pass http://dynamic-upstream;
		}
	}

	server {
		listen 127.0.0.1:2222 default_server;
		server_name _;

		location / {
			return 502 "No available upstream."
		}
	}
}
